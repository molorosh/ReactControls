{"version":3,"sources":["DateTimePicker.js","App.js","serviceWorker.js","index.js"],"names":["DateTimePicker","props","_this","Object","classCallCheck","this","hours","undefined","year","minutes","day","month","valueDate","possibleConstructorReturn","getPrototypeOf","call","dateFromFormattedString","value","getHours","getFullYear","getMonth","getMinutes","getDate","state","isEdit","isEditable","currentMinutes","currentHours","currentDay","currentMonth","currentYear","doEdit","bind","assertThisInitialized","doCancel","doUpdate","doChangeHours","doChangeMinutes","doChangeDay","doChangeMonth","doChangeYear","resetCurrentValues","checkDayForValidity","stringForCurrentDate","setState","parsedYear","parsedMonth","parsedDay","parsedHour","parsedMinute","formatTo00","dateObject","formattedString","parsedDateNumber","Date","parse","parsedDate","Number","NaN","val","formatted","onChange","event","target","_this2","_this3","maxDays","daysInMonth","parseInt","iYear","iMonth","max","_this4","parsedDateString","stringFromDateObject","editControl","react_default","a","createElement","className","readControl","Array","from","keys","map","n","key","selectHours","selectMinutes","days","selectDay","months","selectMonth","yy","unshift","years","selectYear","title","onClick","Component","App","demoDateString","handleDatePickerChange","handleFormSubmit","dateString","console","log","preventDefault","src_DateTimePicker","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6fd7798a.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n// note: the guidance on component updating has changed\n// see https://reactjs.org/docs/react-component.html#unsafe_componentwillreceiveprops\n\n// so componentWillReceiveProps(nextProps) {...} is considerd UNSAFE \n// and will be removed in React.js v 17\n\n// \n\nclass DateTimePicker extends Component {\n    constructor(props){\n        super(props);\n        let hours = undefined;\n        let year = undefined;\n        let minutes = undefined;\n        let day = undefined;\n        let month = undefined;\n        let valueDate = this.dateFromFormattedString(props.value);\n        if(valueDate !== null){\n            hours = valueDate.getHours();\n            year = valueDate.getFullYear();\n            month = 1 + valueDate.getMonth();\n            minutes = valueDate.getMinutes();\n            day = valueDate.getDate();\n        }\n        this.state = {\n            isEdit: props.isEdit,\n            isEditable: props.isEditable,\n            value: props.value,\n            currentMinutes: minutes,\n            currentHours: hours,\n            currentDay: day,\n            currentMonth: month,\n            currentYear: year\n        };\n        // must bind functions that require 'this.' e.g. \n        // this.setState({isEdit: false}});\n        this.doEdit = this.doEdit.bind(this);\n        this.doCancel = this.doCancel.bind(this);\n        this.doUpdate = this.doUpdate.bind(this);\n        this.doChangeHours = this.doChangeHours.bind(this);\n        this.doChangeMinutes = this.doChangeMinutes.bind(this);\n        this.doChangeDay = this.doChangeDay.bind(this);\n        this.doChangeMonth = this.doChangeMonth.bind(this);\n        this.doChangeYear = this.doChangeYear.bind(this);\n        this.resetCurrentValues = this.resetCurrentValues.bind(this);\n        this.checkDayForValidity = this.checkDayForValidity.bind(this);\n        this.stringForCurrentDate = this.stringForCurrentDate.bind(this);\n    }\n\n    /*\n    // this will make the child component listen for changes to its props\n    componentWillReceiveProps(nextProps) {\n        this.setState({ value: nextProps.value });  \n    }\n    but we are deprecating this \n    */\n\n    resetCurrentValues(){\n        let hours = undefined;\n        let year = undefined;\n        let minutes = undefined;\n        let day = undefined;\n        let month = undefined;\n        let valueDate = this.dateFromFormattedString(this.state.value);\n        if(valueDate !== null){\n            hours = valueDate.getHours();\n            year = valueDate.getFullYear();\n            month = 1 + valueDate.getMonth();\n            minutes = valueDate.getMinutes();\n            day = valueDate.getDate();\n        }\n        this.setState(\n            {\n                currentMinutes: minutes,\n                currentHours: hours,\n                currentDay: day,\n                currentMonth: month,\n                currentYear: year\n            }\n        );\n    }\n\n    stringForCurrentDate(){\n        let parsedYear = this.state.currentYear;\n        let parsedMonth = this.state.currentMonth;\n        let parsedDay = this.state.currentDay;\n        let parsedHour = this.state.currentHours;\n        let parsedMinute = this.state.currentMinutes;\n        let formattedString = parsedYear\n            + \"-\" + this.formatTo00(parsedMonth)\n            + \"-\" + this.formatTo00(parsedDay)\n            + \"T\" + this.formatTo00(parsedHour)\n            + \":\" + this.formatTo00(parsedMinute);\n        return formattedString; \n    }\n\n    stringFromDateObject(dateObject){\n        let parsedYear = dateObject.getFullYear();\n        let parsedMonth = 1 + dateObject.getMonth();\n        let parsedDay = dateObject.getDate();\n        let parsedHour = dateObject.getHours();\n        let parsedMinute = dateObject.getMinutes();\n        let formattedString = parsedYear\n            + \"-\" + (parsedMonth<10?\"0\"+parsedMonth:parsedMonth)\n            + \"-\" + (parsedDay<10?\"0\"+parsedDay:parsedDay)\n            + \"T\" + (parsedHour<10?\"0\"+parsedHour:parsedHour)\n            + \":\" + (parsedMinute<10?\"0\"+parsedMinute:parsedMinute);\n        return formattedString;\n    }\n\n    dateFromFormattedString(formattedString){\n        let parsedDateNumber = Date.parse(formattedString);\n        let parsedDate = null;\n        if(parsedDateNumber !== Number.NaN){\n            parsedDate = new Date(parsedDateNumber);\n        }\n        return parsedDate;\n    }\n\n    formatTo00(val){\n        if(val < 10){\n            return \"0\" + val;\n        }else{\n            return val;\n        }\n    }\n\n    doEdit(){\n        this.setState({isEdit: true});\n    }\n\n    doCancel(){\n        this.resetCurrentValues();\n        this.setState({isEdit: false});\n    }\n\n    doUpdate(){\n        let formatted = this.stringForCurrentDate();\n        this.props.onChange(formatted);\n        this.setState({isEdit:false})\n    }\n\n    doChangeHours(event){\n        this.setState({currentHours: event.target.value});\n    }\n    \n    doChangeMinutes(event){\n        this.setState({currentMinutes: event.target.value});\n    }\n\n    doChangeYear(event){\n        this.setState(\n            {currentYear: event.target.value},\n            () => this.checkDayForValidity() \n            );\n    }\n\n    doChangeMonth(event){\n        this.setState(\n            {currentMonth: event.target.value},\n            () => this.checkDayForValidity()\n            );\n    }\n\n    doChangeDay(event){\n        this.setState({currentDay: event.target.value});\n    }\n\n    checkDayForValidity(){\n        let maxDays = 31;\n        if(this.state.currentDay !== undefined){\n            maxDays = this.daysInMonth(\n                this.state.currentYear,\n                this.state.currentMonth - 1\n                );\n            let days = parseInt(this.state.currentDay);\n            if(days > maxDays){\n                this.setState({currentDay: maxDays});\n            }\n        }\n    }\n\n    daysInMonth(iYear, iMonth)\n    {\n        let max = 31;\n        let month = parseInt(iMonth);\n        if(month === 8 /* September */\n            || month === 4 /* April */\n            || month === 6 /* June */\n            || month === 10 /* November */){\n            max = 30;\n        }else if(month === 1){\n            let year = parseInt(iYear);\n            if(year % 100 === 0 ? year % 400 === 0 : year % 4 === 0){\n                max = 29;\n            }else{\n                max = 28;\n            }\n        }\n        return max;\n    }\n\n    render(){\n        let parsedDate = this.dateFromFormattedString(this.state.value);\n        let parsedDateString = null;\n        if(parsedDate !== null){\n            parsedDateString = this.stringFromDateObject(parsedDate);\n        }\n        let editControl = (<span className=\"editControl\"></span>);\n        let readControl = (<span className=\"readControl\"></span>);\n        if(this.state.isEdit && this.state.isEditable){\n            // just implement the editable hours for now...\n            const hh = Array.from(Array(24).keys());\n            const hours = hh.map((n) => <option key={n} value={n}>{this.formatTo00(n)}</option>);\n            let selectHours = <select onChange={this.doChangeHours} value={this.state.currentHours}>\n                {hours}\n            </select>\n            const mmmm = Array.from(Array(60).keys());\n            const minutes = mmmm.map((n) => <option key={n} value={n}>{this.formatTo00(n)}</option>);\n            let selectMinutes = <select onChange={this.doChangeMinutes} value={this.state.currentMinutes}>\n                {minutes}\n            </select>\n            // we need to ensure the number of days is valid for the \n            // year and month\n            let maxDays = 31;\n            if(this.state.currentDay !== undefined){\n                maxDays = this.daysInMonth(\n                    this.state.currentYear,\n                    this.state.currentMonth - 1\n                    );\n            }\n            const dd = Array.from(Array(maxDays).keys());\n            const days = dd.map((n) => <option key={n} value={n+1}>{this.formatTo00(n+1)}</option>);\n            let selectDay = <select onChange={this.doChangeDay} value={this.state.currentDay}>\n                {days}\n            </select>\n            const mm = Array.from(Array(12).keys());\n            const months = mm.map((n) => <option key={n} value={n+1}>{this.formatTo00(n+1)}</option>);\n            let selectMonth = <select onChange={this.doChangeMonth} value={this.state.currentMonth}>\n                {months}\n            </select>\n            let yy = [2018,2019,2020];\n            if(this.state.currentYear !== undefined && this.state.currentYear < 2018){\n                yy.unshift(this.state.currentYear);\n            }\n            const years = yy.map((n) => <option key={n} value={n}>{this.formatTo00(n)}</option>);\n            let selectYear = <select onChange={this.doChangeYear} value={this.state.currentYear}>\n                {years}\n            </select>\n            editControl = <span>\n            <p>\n                <span className=\"molorosh-control-title\">{this.props.title}</span>:     \n                {selectYear}-\n                {selectMonth}-\n                {selectDay}<span className=\"molorosh-datetime-t-spacer\">T</span>\n                {selectHours}:\n                {selectMinutes}\n                <button className=\"molorosh-button molorosh-button-update\"  onClick={this.doUpdate}>Update</button>\n                <button className=\"molorosh-button molorosh-button-cancel\"  onClick={this.doCancel}>Cancel</button>\n            </p>\n            </span>\n        }else{\n            if(this.state.isEditable){\n                readControl = <span>\n                <p>\n                    <span className=\"molorosh-control-title\">{this.props.title}</span>: {parsedDateString}\n                    <button className=\"molorosh-button molorosh-button-edit\" onClick={this.doEdit}>Edit</button>\n                </p>\n            </span>    \n            }else{\n                readControl = <span>\n                <p><span className=\"molorosh-control-title\">{this.props.title}</span>:  {parsedDateString}</p>\n            </span>\n            }\n            \n        }\n        return(\n            <div>\n                {editControl}\n                {readControl}\n            </div>\n        );\n    }\n}\n\nexport default DateTimePicker;","import React, { Component } from 'react';\nimport './App.css';\nimport './Control.css';\nimport DateTimePicker from './DateTimePicker';\n\nclass App extends Component {\n\t\n\tconstructor(props){\n        super(props);\n        this.state = {\n            demoDateString: \"2008-08-28T23:30\"\n        }\n        // DatePicker events\n        this.handleDatePickerChange = this.handleDatePickerChange.bind(this);\n\t\tthis.handleFormSubmit = this.handleFormSubmit.bind(this);\n    }\n\t\n\thandleDatePickerChange(dateString){\n        console.log(\"handleDatePickerChange(...)\");\n        console.log(\"dateString:\");\n        console.log(dateString);\n        this.setState(\n            {demoDateString: dateString}\n            , ()=> {\n                console.log(\"finished update\");\n            }\n        );\n    }\n\t\n\thandleFormSubmit(event){\n        event.preventDefault();\n    }\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t<h1>molorosh React.js controls</h1>\n\t\t\t\t</header>\n\t\t\t\t<article>\n\t\t\t\t\t<p><em>Pop-up free, in-place editing.</em></p>\n\t\t\t\t\t<section>\n\t\t\t\t\t\t<h2>DateTime Picker</h2>\n\t\t\t\t\t\t<h3>Demo One: Date and Time</h3>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tReact.js does not like having Javascript objects like <code>new Date()</code> as child elements, \n\t\t\t\t\t\t\tso we usually use a canonical date time format string instead.</p>\n\t\t\t\t\t\t<DateTimePicker\n\t\t\t\t\t\t\ttitle=\"demo date time\"\n\t\t\t\t\t\t\tisEdit={false}\n\t\t\t\t\t\t\tisEditable={true}\n\t\t\t\t\t\t\tvalue={this.state.demoDateString}\n\t\t\t\t\t\t\tonChange={this.handleDatePickerChange}\n\t\t\t\t\t\t\t// updating with a key is a simple\n\t\t\t\t\t\t\t// way to ensure the child component is redrawn\n\t\t\t\t\t\t\t// from scratch if the principal data is changed\n\t\t\t\t\t\t\tkey={this.state.demoDateString}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<p>The value of <code>state.demoDateString</code> is <code>{this.state.demoDateString}</code></p>\n\t\t\t\t\t</section>\n\t\t\t\t</article>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}